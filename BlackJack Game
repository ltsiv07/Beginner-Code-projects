############### Blackjack Project #####################

#Difficulty Normal ðŸ˜Ž: Use all Hints below to complete the project.
#Difficulty Hard ðŸ¤”: Use only Hints 1, 2, 3 to complete the project.
#Difficulty Extra Hard ðŸ˜­: Only use Hints 1 & 2 to complete the project.
#Difficulty Expert ðŸ¤¯: Only use Hint 1 to complete the project.

############### Our Blackjack House Rules #####################

## The deck is unlimited in size. 
## There are no jokers. 
## The Jack/Queen/King all count as 10.
## The the Ace can count as 11 or 1.
## Use the following list as the deck of cards:
## The cards in the list have equal probability of being drawn.
## Cards are not removed from the deck as they are drawn.
## The computer is the dealer.

##################### Hints #####################

#Hint 1: Go to this website and try out the Blackjack game: 
#   https://games.washingtonpost.com/games/blackjack/
#Then try out the completed Blackjack project here: 
#   http://blackjack-final.appbrewery.repl.run

#Hint 2: Read this breakdown of program requirements: 
#   http://listmoz.com/view/6h34DJpvJBFVRlZfJvxF
#Then try to create your own flowchart for the program.

#Hint 3: Download and read this flow chart I've created: 
#   https://drive.google.com/uc?export=download&id=1rDkiHCrhaf9eX7u7yjM1qwSuyEk-rPnt

#Hint 4: Create a deal_card() function that uses the List below to *return* a random card.
#11 is the Ace.
#cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]

#Hint 5: Deal the user and computer 2 cards each using deal_card() and append().
#user_cards = []
#computer_cards = []

#Hint 6: Create a function called calculate_score() that takes a List of cards as input 
#and returns the score. 
#Look up the sum() function to help you do this.

#Hint 7: Inside calculate_score() check for a blackjack (a hand with only 2 cards: ace + 10) and return 0 instead of the actual score. 0 will represent a blackjack in our game.

#Hint 8: Inside calculate_score() check for an 11 (ace). If the score is already over 21, remove the 11 and replace it with a 1. You might need to look up append() and remove().

#Hint 9: Call calculate_score(). If the computer or the user has a blackjack (0) or if the user's score is over 21, then the game ends.

#Hint 10: If the game has not ended, ask the user if they want to draw another card. If yes, then use the deal_card() function to add another card to the user_cards List. If no, then the game has ended.

#Hint 11: The score will need to be rechecked with every new card drawn and the checks in Hint 9 need to be repeated until the game ends.

#Hint 12: Once the user is done, it's time to let the computer play. The computer should keep drawing cards as long as it has a score less than 17.

#Hint 13: Create a function called compare() and pass in the user_score and computer_score. If the computer and user both have the same score, then it's a draw. If the computer has a blackjack (0), then the user loses. If the user has a blackjack (0), then the user wins. If the user_score is over 21, then the user loses. If the computer_score is over 21, then the computer loses. If none of the above, then the player with the highest score wins.

#Hint 14: Ask the user if they want to restart the game. If they answer yes, clear the console and start a new game of blackjack and show the logo from art.py.
cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
from art import logo
import random


def card_puller():
  rando_card_puller = cards[random.randint(0,len(cards)-1)]
  return rando_card_puller
  
def blackjack():
  bust = False
  hit_me = True
  print(logo)
  #Deal player 2 cards and store in player_cards dictionary
  player_cards = {
  "1" : card_puller(),
  "2" : card_puller()
  }
  
  #display player cards []
  print(f"Your cards : {player_cards['1'], player_cards['2']}")
  #deal computer 2 cards and store in comp_cards dictionary
  comp_cards = {
    "1" : card_puller(),
    "2" : card_puller()
    }
  
  #display Computer cards[]
  print(f"Computer's first card: {comp_cards['1']}")
  #add card values
  add_player_cards = player_cards['1'] + player_cards['2']
  add_comp_cards = comp_cards['1'] + comp_cards['2']
  print(add_player_cards)
    #type y for hit n for pass (repeatable until cards bust or player does not want to add more cards)
  while hit_me == True and bust == False:
    hit_player= input("Type 'y' to get another card, type 'n' to pass: ")
    if hit_player == 'y':
      player_cards[len(player_cards)+1] = card_puller()
      new_card = player_cards[len(player_cards)]
      add_player_cards = add_player_cards + player_cards[len(player_cards)]
      if new_card != 11 and add_player_cards <= 21:
        print(f"1Your new card is a {new_card}.  Here are all your cards: {player_cards}.\n Your total is {add_player_cards}.")
      elif new_card == 11 and add_player_cards+new_card > 21:
        new_card = player_cards[len(player_cards)] = 1
        add_player_cards = add_player_cards + player_cards[len(player_cards)]
        print(f"2Your new card is a {new_card}.  Here are all your cards: {player_cards}.\n Your total is {add_player_cards}.")
        print(player_cards)
      elif new_card == 11 and add_player_cards+new_card <= 21:
        add_player_cards = add_player_cards + player_cards[len(player_cards)]
        print(f"3Your new card is a {new_card}.  Here are all your cards: {player_cards}.\n Your total is {add_player_cards}.")
      elif add_player_cards > 21:
        print(f" 5Your new card is a (n) {new_card}.\n Your total is {add_player_cards}.")
        bust = True
    elif hit_player == 'n':
      hit_me = False
    else:
      print("Invalid Selection Try Again...")
    
  if add_comp_cards < 17 and bust == False:
      while add_comp_cards < 17:
        new_comp_card = comp_cards[len(comp_cards)+1] = card_puller()
        add_comp_cards = add_comp_cards + new_comp_card
        
          
  #display final hand player and comp
  player_card_list = list(player_cards.values())
  comp_card_list = list(comp_cards.values())
  print(f"Your final hand : {player_card_list}")
  print(f"Computer's final hand: {comp_card_list}")
  

  #determine winner
  print(f"Player shows: {add_player_cards}.")
  print(f"Computer shows: {add_comp_cards}.")
  if add_player_cards > add_comp_cards and bust == False:
    print("You Win")
  elif add_player_cards < add_comp_cards and add_comp_cards <= 21:
    print("You Lose")
  elif add_comp_cards > 21:
    print("You Win")
  elif bust == True:
    print("You lose")
  else:
    print("You Draw")
    


keep_going = True
import replit
while keep_going:
  play = input("Do you want to play a game of black jack? 'y' or 'n'").lower()
  if play == "n":
    replit.clear()
    keep_going = False
  elif play == 'y':
    blackjack()
  else: 
    print("Invalid Response Try Again")
    
